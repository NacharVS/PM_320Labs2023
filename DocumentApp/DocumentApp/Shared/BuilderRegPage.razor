@using DocumentApp.Interfaces
@using DocumentApp.Models
@using DocumentApp.Pages
@using DocumentApp.Services
@using System.Text.RegularExpressions
@inject UserService UserService; 
@if (_builder is not null)
{

    <div class="form-outline mb-4">
        <input type="text" class="form-control form-control-lg" @bind-value="@_builder.BuilderName"  @onblur="() => SendUser.InvokeAsync(_builder)"/>
        <label class="form-label">Наименование проектной организации</label>
    </div>
    <div class="form-outline mb-4">
        <input type="text" class="form-control form-control-lg" @bind-value="@_builder.OGRN" @onblur="SendUserInfo"/>
        <label class="form-label">ОГРН</label>
        @if (!IsOGRNCorrect())
        {
            <div class="alert alert-warning">Неверно введен ОГРН</div>
        }
    </div>
    <div class="form-outline mb-4">
        <input type="text" class="form-control form-control-lg" @bind-value="@_builder.INN" @onblur="SendUserInfo"/>
        <label class="form-label">ИНН</label>
        @if (!IsINNCorrect())
        {
            <div class="alert alert-warning">Неверно введен ИНН</div>
        }
    </div>
    <div class="form-outline mb-4">
        <input type="text" class="form-control form-control-lg" @bind-value="@_builder.KPP" @onblur="SendUserInfo"/>
        <label class="form-label">КПП</label>
        @if (!IsKPPCorrect())
        {
            <div class="alert alert-warning">Неверно введен КПП</div>
        }
    </div>
    <div class="form-outline mb-4">
        <input type="text" class="form-control form-control-lg" @bind-value="@_builder.Adress"  @onblur="() => SendUser.InvokeAsync(_builder)"/>
        <label class="form-label">Адрес</label>
    </div>
    <div class="form-outline mb-4">
        <input type="text" class="form-control form-control-lg" @bind-value="@_builder.Director"  @onblur="() => SendUser.InvokeAsync(_builder)"/>
        <label class="form-label">Руководитель исполнительного комитета РТ</label>
    </div>
}

@code {
    //public Builder? user;

    public bool CanSave = true;
    
    private bool IsOGRNCorrect()
    {
        if (_builder.OGRN != null)
        {
            Regex r = new Regex(@"^[0-9]+$");;
            return r.IsMatch(_builder.OGRN) && _builder.OGRN.Length == 13;
        }
        return false;
    }

    private bool IsINNCorrect()
    {
        if(_builder.INN != null)
        {
            Regex r = new Regex(@"^[0-9]+$");;
            return r.IsMatch(_builder.INN) && _builder.INN.Length == 10;
        }
        return false;
    }

    private bool IsKPPCorrect()
    {
        if (_builder.KPP != null)
        {
            Regex r = new Regex(@"^[0-9]+$");;
            return r.IsMatch(_builder.KPP) && _builder.KPP.Length == 9;
        }
        return false;
    }

    public void Check()
    {
        CanSave = IsOGRNCorrect() && IsINNCorrect() && IsKPPCorrect();
    }
    
    [Parameter]
    public Builder Builder { get; set; }
    private Builder _builder = new Builder();
    [Parameter]
    public EventCallback<User> SendUser { get; set; }
    
    protected override void OnInitialized()
    {
        if (Builder != null)
        {
            _builder = Builder;
        }
        StateHasChanged();
    }

    private void SendUserInfo()
    {
        if (IsINNCorrect() && IsKPPCorrect() && IsOGRNCorrect())
        {
            SendUser.InvokeAsync(_builder);
        }
    }
}