@page "/project"
@page "/project/{ProjectId}"
@using Core.Entities.Users
@using Core.Enums
@using MongoDB.Bson
@using Web.Services
@using Web.Components
@using Core.Entities.Projects
@using Core.Entities.Documents

@inject NavigationManager NavigationManager
@inject ProjectDomainService ProjectDomainService;
@inject UserDomainService UserDomainService;
@inject DocumentDomainService DocumentDomainService
@inject AuthService AuthService;

@if (_isDataLoaded)
{
    <div class="vh-100" style="background-color: #fff;">
        <div class="container py-5 h-100">
            <div class="row d-flex justify-content-start align-items-top h-100">
                <div class="col col-lg-10 mb-4 mb-lg-0">
                    <form>
                        <div class="form-outline mb-4">
                            <input value="@name" @oninput="@(ui => { name = (string?)ui.Value; })" type="text" id="name" class="form-control"/>
                            <label class="form-label" for="name">Name</label>
                        </div>

                        <div class="form-outline mb-4">
                            <textarea value="@description" @oninput="@(ui => { description = (string?)ui.Value; })" class="form-control" id="description" rows="4"></textarea>
                            <label class="form-label" for="description">Description</label>
                        </div>

                        <p>Select Builder for project</p>
                        <select @onchange="@(ui => { builderId = GetObjectId((string?)ui.Value); })" class="form-select" aria-label="Default select example">
                            @foreach (var i in _builders)
                            {
                                <option value="@i?._id">@i?.Name</option>
                            }
                        </select>

                        <p>Select Architect for project</p>
                        <select @onchange="@(ui => { architectId = GetObjectId((string?)ui.Value); })" class="form-select" aria-label="Default select example">
                            @foreach (var i in _architects)
                            {
                                <option value="@i?._id">@i?.Name</option>
                            }
                        </select>
                        <p>Industry: @_project.IndustryType</p>

                        <p class="alert-danger">@exceptionText</p>
                    </form>
                    <button @onclick="@SaveProject" class="btn btn-outline-primary btn-block mb-4">Save</button>
                </div>
                <div class="row row-cols-3 g-3">
                    @foreach (var document in _documents)
                    {
                        <div class="col">
                            <Document Doc="@document"/>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string ProjectId { get; set; } = null!;

    private BaseProject _project = null!;
    private bool _isDataLoaded;

    private List<Builder?> _builders;
    private List<Architect?> _architects;
    private List<BaseDocument?> _documents;

    private string? name;
    private string? description;
    private string? exceptionText;
    private ObjectId? builderId;
    private ObjectId? architectId;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.AuthorizedUser is null)
        {
            NavigationManager.NavigateTo("/authorization");
        }

        if (AuthService.AuthorizedUser!.Role != UserRole.Customer)
        {
            NavigationManager.NavigateTo("/");
        }

        _project = (await ProjectDomainService.LoadProject(ObjectId.Parse(ProjectId)))!;

        _builders = (await UserDomainService.LoadBuilders()).ToList();
        _architects = (await UserDomainService.LoadArchitects()).ToList();
        _documents = (await DocumentDomainService
            .LoadProjectDocuments(ObjectId.Parse(ProjectId), _project.IndustryType, true)).ToList();

        builderId = _project.BuilderId;
        architectId = _project.ArchitectId;
        name = _project.Name;
        description = _project.Description;

        var tempBuilder = _builders.FirstOrDefault(x => x?._id == builderId);
        var tempArch = _architects.FirstOrDefault(x => x?._id == architectId);

        _builders.Remove(tempBuilder);
        _architects.Remove(tempArch);
        _builders.Insert(0, tempBuilder);
        _architects.Insert(0, tempArch);

        _isDataLoaded = true;
    }

    private ObjectId? GetObjectId(string? stringId)
    {
        if (ObjectId.TryParse(stringId, out var id))
        {
            return id;
        }
        return null;
    }

    private async Task SaveProject()

    {
        if (string.IsNullOrEmpty(name))
        {
            exceptionText = "Project name cannot be empty!";
            return;
        }

        if (builderId is null)
        {
            exceptionText = "Builder cannot be empty";
            return;
        }

        if (architectId is null)
        {
            exceptionText = "Architect cannot be empty";
            return;
        }

        await ProjectDomainService.SaveProject(new BaseProject
        {
            _id = _project._id,
            Name = name!,
            Description = description,
            CustomerId = AuthService.AuthorizedUser!._id,
            BuilderId = builderId.GetValueOrDefault(),
            ArchitectId = architectId.GetValueOrDefault(),
            IndustryType = _project.IndustryType
        }
            );

        NavigationManager.NavigateTo("/projects");
    }

}