@page "/doc"
@using Data
@using Services
@inject NavigationManager Navigation
@inject CurrentUsersRole CurrentUser
@inject CurrentUser CurrentUserName
@inject ILocalStorageService LocalStorage
@inject DocumentName Doc


<div class="card">
    <h4 class="card-header">Создание проекта</h4>
    <div class="card-body">
        <p>Отрасль: @CurrentUserName.CurrentCustomer.Department</p>
        <hr>
            <label for="name"><b>Название проекта</b></label>
            <input type="text" placeholder="Enter Project Name" name="name" id="name" required @bind-value="name" />
            <br/>
            <label for="name"><b>Застройщик</b></label>
            <select name="dev" @onchange = "DeveloperChanged">
                <option value="-">-</option>
                @foreach (var dev in developers)
                {
                    <option value="@dev.Login">@dev.DeveloperOrganisation</option>
                }
            </select>
            <br/>
            <label for="name"><b>Проектировщик</b></label>
            <select name="des" @onchange = "DesignerChanged">
                <option value="-">-</option>
                @foreach (var des in designers)
                {
                    <option value="@des.Login">@des.DesignerOrganisation</option>
                }
            </select>
            <table class="table">
                <thead>
                    <tr>
                        <th>Наименование документа</th>
                        <th>В первую очередь</th>
                    </tr>
                </thead>
                <tbody>
                    @switch (@CurrentUserName.CurrentCustomer.Department)
                    {
                        case "Водоснабжение":
                            @foreach (var doc in Doc.documentH)
                            {
                                <tr>
                                    <td @onclick = "() => Changed(doc.Key)">@doc.Key</td>
                                    <td>
                                        <input type="checkbox" checked = "@doc.Value" disabled="disabled"><label></label>
                                    </td>
                                </tr>
                            }
                            @foreach (var doc in Doc.documentHDes)
                            {
                                <tr>
                                    <td @onclick = "() => ChangedTwo(doc.Key)">@doc.Key</td>
                                    <td>
                                        <input type="checkbox" checked = "@doc.Value" disabled="disabled"><label></label>
                                    </td>
                                </tr>
                            }
                        break;
                        case "Газификация":
                            @foreach (var doc in Doc.documentG)
                            {
                                <tr>
                                    <td @onclick = "() => ChangedG(doc.Key)">@doc.Key</td>
                                    <td>
                                        <input type="checkbox" checked = "@doc.Value" disabled="disabled"><label></label>
                                    </td>
                                </tr>
                            }
                            @foreach (var doc in Doc.documentGDes)
                            {
                                <tr>
                                    <td @onclick = "() => ChangedGTwo(doc.Key)">@doc.Key</td>
                                    <td>
                                        <input type="checkbox" checked = "@doc.Value" disabled="disabled"><label></label>
                                    </td>
                                </tr>
                            }
                        break;
                    }
                </tbody>
            </table>
        <hr>
        <button type="submit" class="registerbtn" @onclick="Save">Создать</button>
    </div>
</div>

<button class = "registerbtn"  @onclick="GoToProj">Мои проекты</button>

@code {
    string developer;
    string designer;
    string name;
    bool checkedValue;
    bool checkedValueG;
    List<Developer> developers;
    List<Designer> designers;

    protected override void OnInitialized()
    {
        developers = DBConnection.ImportAllDevelopers();
        designers = DBConnection.ImportAllDesigner();
    }

    public void Changed(string key)
    {
        checkedValue = !Doc.documentH[key];
        Doc.documentH[key] = checkedValue;
    }

    public void ChangedTwo(string key)
    {
        checkedValue = !Doc.documentHDes[key];
        Doc.documentHDes[key] = checkedValue;
    }

    public void ChangedG(string key)
    {
        checkedValueG = !Doc.documentG[key];
        Doc.documentG[key] = checkedValueG;
    }

    public void ChangedGTwo(string key)
    {
        checkedValueG = !Doc.documentGDes[key];
        Doc.documentGDes[key] = checkedValueG;
    }

    public void GoToProj()
    {
        Navigation.NavigateTo("/mainproj");
    }

    public void DeveloperChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            developer = e.Value.ToString();
        }
    }

    public void DesignerChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            designer = e.Value.ToString();
        }
    }

    public void Save()
    {
        Project project = new Project();
        project.Name = name;
        project.Department = CurrentUserName.CurrentCustomer.Department;
        project.Customer = CurrentUserName.CurrentCustomer.MiddleName;
        project.Designer = designer;
        project.Developer = developer;

        switch (project.Department)
        {
            case "Водоснабжение":
                project.DocsPreor = Doc.documentH;
                project.DocsPreorTwo = Doc.documentHDes;
                DBConnection.AddToDataBaseProjectW(project);
                break;
            case "Газификация" :
                project.DocsPreor = Doc.documentG;
                project.DocsPreorTwo = Doc.documentGDes;
                DBConnection.AddToDataBaseProjectG(project);
                break;

        }

        Navigation.NavigateTo("/mainproj");
    }
}